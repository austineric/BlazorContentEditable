@inject IJSRuntime JSRuntime

<style>
    /*set the height to auto if form-control is used, otherwise it defaults to the bootstrap.min.css of 34px*/
    .form-control {
        height: auto;
    }
</style>

<div id="@DivID" contenteditable="@(Disabled ? false : true)" @attributes="DivAttributes" />

@code {

    [Parameter]
    public string InitialText { get; set; }

    [Parameter]
    public string CSSClass { get; set; }

    [Parameter]
    public string CSSStyle { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string DisabledBackgroundColor { get; set; }

    [Parameter]
    public EventCallback<string> UpdatedText { get; set; }

    private string TextToDisplay { get; set; }
    private Random RandomNumberGenerator { get; set; } = new Random();
    private int DivID { get; set; }
    private Dictionary<string, object> DivAttributes = new Dictionary<string, object>();

    protected override void OnInitialized()
    {
        DivID = RandomNumberGenerator.Next();
        TextToDisplay = string.IsNullOrWhiteSpace(InitialText) ? "" : InitialText.Replace(Environment.NewLine, "<br />");

        //add disply:inline-block to CSSStyle (to prevent Enter from creating new divs in the contenteditable div)
        CSSStyle = "display:inline-block;" + CSSStyle;

        //handle Disabled
        if (Disabled)
        {
            //remove background-color if supplied
            if (CSSStyle.Contains("background-color"))
            {
                List<string> SplitCSSStyle = CSSStyle.Split(';').ToList();
                SplitCSSStyle.RemoveAll(Style => Style.Trim().StartsWith("background-color"));
                CSSStyle = string.Join(";", SplitCSSStyle);
            }

            //add DisabledBackgroundColor (default to lightgray if DisabledBackgroundColor was not supplied)
            CSSStyle = CSSStyle + $"background-color:{DisabledBackgroundColor ?? "lightgray"}";
        }

        //add CSSClass if supplied
        if (!string.IsNullOrWhiteSpace(CSSClass))
        {
            DivAttributes.Add("class", CSSClass);
        }

        //add CSSStyle
        DivAttributes.Add("style", CSSStyle);

    }

    //send initial text (if supplied) to javascript to place in the div
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>("BlazorContentEditable", DivID, DotNetObjectReference.Create(this), TextToDisplay, DisabledBackgroundColor);
        }
    }

    //receive input text from javascript and invoke callback to parent component
    [JSInvokable]
    public void GetUpdatedTextFromJavascript(string TextFromJavascript)
    {
        UpdatedText.InvokeAsync(TextFromJavascript);
    }

}
